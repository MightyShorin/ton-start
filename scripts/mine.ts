import { Address, TonClient, toNano } from "@ton/ton";
import { unixNow } from "../lib/utils";
import { MineMessageParams, Queries } from "../wrappers/NftGiver";
// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç TON –≤ –Ω–∞–Ω–æ–∫–æ–∏ (1 TON = 1e9 –Ω–∞–Ω–æ–∫–æ–∏)
import { NetworkProvider } from "@ton/blueprint";
// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç—å—é (Testnet/Mainnet) –∏ –∫–æ—à–µ–ª—å–∫–æ–º

const walletAddress = Address.parse(
  "UQBmgoUnV8_m565DFw0AVMrTpAKXUEMEEgvrAWNMPDGGNajD"
);
const collectionAddress = Address.parse(
  "EQDk8N7xM5D669LC2YACrseBJtDyFqwtSPCNhRWXU7kjEptX"
);

async function mine() {
  // specify endpoint for Testnet
  //   const endpoint = "https://testnet.toncenter.com/api/v2/jsonRPC";

  // specify endpoint for Mainnet
  const endpoint = "https://toncenter.com/api/v2/jsonRPC";

  // initialize ton library
  const client = new TonClient({ endpoint });

  const miningData = await client.runMethod(
    collectionAddress,
    "get_mining_data"
  );

  const { stack } = miningData; // stack –∏–º–µ–µ—Ç —Ç–∏–ø TupleReader, const stack = miningData.stack;

  const complexity = stack.readBigNumber();
  const lastSuccess = stack.readBigNumber();
  const seed = stack.readBigNumber();
  const targetDelta = stack.readBigNumber();
  const minCpl = stack.readBigNumber();
  const maxCpl = stack.readBigNumber();

  console.log({ complexity, lastSuccess, seed, targetDelta, minCpl, maxCpl });

  const mineParams: MineMessageParams = {
    expire: unixNow() + 300, // 5 min is enough to make a transaction
    mintTo: walletAddress, // your wallet
    data1: 0n, // temp variable to increment in the miner
    seed, // unique seed from get_mining_data
  };

  let msg = Queries.mine(mineParams); // transaction builder - —ç—Ç–æ —è—á–µ–π–∫–∞ (Cell)
  // [OpCode (4 –±–∞–π—Ç–∞)]
  // [expire (4 –±–∞–π—Ç–∞)]
  // [mintTo (34 –±–∞–π—Ç–∞)]
  // [data1 (32 –±–∞–π—Ç–∞)]
  // [seed (16 –±–∞–π—Ç)]
  // [data2 (32 –±–∞–π—Ç–∞)]

  const bufferToBigint = (buffer: Buffer) =>
    BigInt("0x" + buffer.toString("hex"));

  //   console.log(msg); // transaction object
  //   console.log(msg.hash()); // transaction hash
  //   console.log(bufferToBigint(msg.hash())); // transaction hash as bigint

  let progress = 0;

  // .hash()
  // –í—ã—á–∏—Å–ª—è–µ—Ç —Ö—ç—à —è—á–µ–π–∫–∏ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É SHA-256 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç TON)
  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ Buffer
  while (bufferToBigint(msg.hash()) > complexity) {
    console.clear();
    console.log(
      "–ú–∞–π–Ω–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω... –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
    );
    console.log();
    console.log(
      `‚õè –¢—ã —Å–º–∞–π–Ω–∏–ª ${progress} —Ö—ç—à–µ–π! –ü–æ—Å–ª–µ–¥–Ω–∏–π: `,
      bufferToBigint(msg.hash())
    ); // –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö—ç—à

    progress += 1;

    mineParams.expire = unixNow() + 300;
    mineParams.data1 += 1n;
    msg = Queries.mine(mineParams);
  }

  console.log();
  console.log(
    "üíé –£—Ä–∞–∞!! –ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: msg_hash, –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω—å—à–µ, —á–µ–º pow_complexity, –Ω–∞–π–¥–µ–Ω!"
  );
  console.log();
  console.log("msg_hash:       ", bufferToBigint(msg.hash()));
  console.log("pow_complexity: ", complexity);
  console.log(
    "msg_hash < pow_complexity: ",
    bufferToBigint(msg.hash()) < complexity
  );

  return msg;
}

export async function run(provider: NetworkProvider) {
  // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –º–∞–π–Ω–∏–Ω–≥–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞–ª–∏–¥–Ω—ã–º PoW
  const msg = await mine();

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
  await provider.sender().send({
    to: collectionAddress, // –ê–¥—Ä–µ—Å NFT-–∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    value: toNano(0.05), // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ TON –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–≥–∞–∑ –∏ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã)
    body: msg, // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (—Ä–µ—à–µ–Ω–∏–µ PoW) –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞ mine() –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ.
  });
}

// –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏?
// –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –º–µ–º–ø—É–ª –±–ª–æ–∫—á–µ–π–Ω–∞.
// –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç:
// - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å PoW (—Ö—ç—à < complexity).
// - –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å seed –∏ expire.
// –ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ:
// - –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å–æ–∑–¥–∞—ë—Ç NFT –¥–ª—è –≤–∞—à–µ–≥–æ mintTo-–∞–¥—Ä–µ—Å–∞.
// - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –±–ª–æ–∫.
